@page "/acc/{fallback_a?}/{fallback_b?}"
@model Coffeeroom.Pages.Account.HomeModel
@{
    ViewData["BodyBg"] = "bg-secondary";
    var avtrid = HttpContext.Session.GetString("avatar") + ".png";
    var fname = HttpContext.Session.GetString("first_name");
    var userrole = HttpContext.Session.GetString("role");
}
<div class="container py-5 mt-4 mt-lg-5 mb-lg-4 my-xl-5">
    <div class="row pt-sm-2 pt-lg-0" id="app">        
        <aside class="col-lg-3 pe-lg-4 pe-xl-5 mt-n3">
            <div class="position-lg-sticky top-0">
                <div class="d-none d-lg-block" style="padding-top: 105px;"></div>
                <div class="offcanvas-lg offcanvas-start" id="sidebarAccount">
                    <button class="btn-close position-absolute top-0 end-0 mt-3 me-3 d-lg-none" type="button" data-bs-dismiss="offcanvas" data-bs-target="#sidebarAccount"></button>
                    <div class="offcanvas-body">
                        <div class="pb-2 pb-lg-0 mb-4 mb-lg-5">
                            <img id="avatar_container" class="d-block rounded-circle mb-2" src="/assets/images/avatars/default/@avtrid" width="80" alt="full name">
                            <h3 class="h5 mb-1" id="name_container">@HttpContext.Session.GetString("fullname").ToString()</h3>
                            <p class="fs-sm text-muted mb-0">@@@HttpContext.Session.GetString("username").ToString() </p>
                        </div>

                        <nav class="nav flex-column pb-2 pb-lg-2">
                            <h4 class="fs-xs fw-medium text-muted text-uppercase pb-1 mb-0">Account</h4>

                            <router-link class="nav-link fw-semibold py-2 px-0" to="/acc"><i class="ai-user-check fs-5 opacity-60 me-2"></i>Overview</router-link>
                            <router-link class="nav-link fw-semibold py-2 px-0" to="/acc/profile"><i class="ai-settings fs-5 opacity-60 me-2"></i>Profile</router-link>
                            <a class="nav-link fw-semibold py-2 px-0" href="/account/personalize"><i class="ai-paint-roll fs-5 opacity-60 me-2"></i>Personalize</a>
                            <a class="nav-link fw-semibold py-2 px-0" href="/account/security"><i class="ai-lock-closed fs-5 opacity-60 me-2"></i>Security</a>
                            <a class="nav-link fw-semibold py-2 px-0 disabled" href="account-earnings.html"><i class="ai-activity fs-5 opacity-60 me-2"></i>Activities</a>

                        </nav>
                        <nav class="nav flex-column"><a class="nav-link fw-semibold py-2 px-0" href="/account/logout"><i class="ai-logout fs-5 opacity-60 me-2"></i>Sign out</a></nav>
                    </div>
                </div>
            </div>
        </aside>
        <!-- Page content-->
        <div class="col-lg-9 pt-4 pb-2 pb-sm-4">
            <h1 id="sectionTitle" class="h2 mb-4">Overview</h1>
            <!-- Basic info-->
            <section class="card border-0 py-1 p-md-2 p-xl-3 p-xxl-4 mb-4">
                <div class="card-body">
                    <router-view></router-view>
                </div>
            </section>
        </div>
    </div>
</div>
<form>
    @Html.AntiForgeryToken()
</form>
<!-- Divider for dark mode only-->
<hr class="d-none d-dark-mode-block">
<!-- Sidebar toggle button-->
<button class="d-lg-none btn btn-sm fs-sm btn-primary w-100 rounded-0 fixed-bottom" data-bs-toggle="offcanvas" data-bs-target="#sidebarAccount"><i class="ai-menu me-2"></i>Account menu</button>


@section jsScripts{
    <script>
        const ProfileComponent = {
            template: `
                      <div class="d-flex align-items-center mt-sm-n1 pb-4 mb-0 mb-lg-1 mb-xl-3">
                                <i class="ai-user text-primary lead pe-1 me-2"></i>
                                <h2 class="h4 mb-0">Profile</h2>
                            </div>
                            <div id="profilepanel">
                                <div class="d-md-flex align-items-center">
                                    <div class="d-sm-flex align-items-center">
                                        <div id="avatar_placeholder" class="rounded-circle bg-size-cover bg-position-center flex-shrink-0" style="width: 80px; height: 80px; background-image: url(/assets/images/avatars/default/@avtrid);"></div>
                                        <div class="pt-3 pt-sm-0 ps-sm-3">
                                            <h3 class="h5 mb-2">
                                                <span id="profilename">
                                                    {{firstname}} {{lastname}}
                                                </span>
                                            </h3>
                                            <div class="text-muted fw-medium d-flex flex-wrap flex-sm-nowrap align-iteems-center">
                                                <div class="d-flex align-items-center me-3">
                                                    <i class="ai-user me-1"></i>
                                                   {{userrole}}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-100 pt-3 pt-md-0 ms-md-auto col-sm-12" style="max-width: 212px;">
                                        <div class="d-flex justify-content-between fs-sm pb-1 mb-2">Select your avatar</div>
                                                <select name="avatar" id="avatars" class="form-select" @@change="handleChange">
                                                 <option v-for="option in options" :value="option.image" :key="option.title">{{ option.title }}</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                                    <div class="row g-3 g-sm-4 mt-0 mt-lg-2">
                                        <div class="col-sm-6">
                                            <label class="form-label" for="fn">First name</label>
                                            <input name="fname" type="text" id="firstname" class="form-control bindenter1" aria-autocomplete="none" value="@Model.UserDetailsDisplay.FirstName" maxlength="20" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label class="form-label" for="ln">Last name</label>
                                            <input name="lname" type="text" id="lastname" class="form-control bindenter1" aria-autocomplete="none" value="@Model.UserDetailsDisplay.LastName" maxlength="20" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label class="form-label" for="email">Email address</label>
                                            <input name="email" type="text" id="email" class="form-control bindenter1" placeholder="Enter your email" value="@Model.UserDetailsDisplay.EMail" aria-autocomplete="none" maxlength="40" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label class="form-label" for="phone">Phone <span class='text-muted'>(optional)</span></label>
                                            <input name="phone" type="text" id="phone" class="form-control bindenter1" value="@Model.UserDetailsDisplay.Phone" placeholder="" maxlength="15" />
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label" for="phone">Bio <span class='text-muted'>(optional)</span></label>
                                            <textarea name="bio" type="text" id="bio" class="form-control bindenter1" placeholder="enter a bio" maxlength="100">@Model.UserDetailsDisplay.Bio</textarea>
                                        </div>

                                        <div class="col-sm-12 col-md-6  d-sm-flex align-items-center pt-sm-2 pt-md-3">
                                            <div class="form-label text-muted mb-2 mb-sm-0 me-sm-4">Gender:</div>
                                            <div class="form-check form-check-inline mb-0">
                                                <input value="m" name="gender" type="radio" id="male" class="form-check-input" @(@Model.UserDetailsDisplay.Gender == "m" ? "checked" : "false") />
                                                <label class="form-check-label" for="male">Male</label>
                                            </div>
                                            <div class="form-check form-check-inline mb-0">
                                                <input value="f" name="gender" type="radio" id="female" class="form-check-input" @(@Model.UserDetailsDisplay.Gender == "f" ? "checked" : "false") />
                                                <label class="form-check-label" for="female">Female</label>
                                            </div>
                                            <div class="form-check form-check-inline mb-0">
                                                <input value="o" name="gender" type="radio" id="other" class="form-check-input" @(@Model.UserDetailsDisplay.Gender == "o" ? "checked" : "false") />
                                                <label class="form-check-label" for="other">Other</label>
                                            </div>
                                        </div>
                                        <div class="col-12 d-flex justify-content-end pt-3">
                                            <button class="btn btn-primary ms-3 ripple" type="button" id="saveprof" onclick="save_prof()">Save Profile</button>
                                        </div>
                                    </div>
                                `,
            data() {
                return {
                    options: [],
                    title: "DashBoard",
                    username: "@Model.UserDetailsDisplay.UserName",
                    firstname: "@Model.UserDetailsDisplay.FirstName",
                    lastname: "@Model.UserDetailsDisplay.LastName",
                    email: "@Model.UserDetailsDisplay.EMail",
                    phone: "@Model.UserDetailsDisplay.Phone",
                    bio: "@Model.UserDetailsDisplay.Bio",
                    avatar: "@avtrid",
                    gender: "@Model.UserDetailsDisplay.Gender",
                };
            },
            async mounted() {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
                this.fetchAvatars();
              
            },
            methods: {
                fetchAvatars() {
                    axios.get("/api/getavatars")
                        .then(response => {
                            this.options = response.data;
                            console.log(response.data);
                        })
                        .catch(error => {
                            console.error('Error fetching data:', error);
                        });
                },
                handleChange(event) {
                    var dropdown = document.getElementById("avatars");
                    var selectedOption = dropdown.options[dropdown.selectedIndex];
                    alert(selectedOption.value);
                    var selectedOptionDataId = selectedOption.getAttribute("image-link");
                    //document.getElementById('avatar_placeholder').style.background-image = 'url(/assets/images/avatars/default/default.png)';
                }
            }
        };
        const HomeComponent = {
            template: ` @await Html.PartialAsync("_Profile") `,
            data() {
                return {
                    title : "DashBoard",
                    username : "@Model.UserDetailsDisplay.UserName",
                    firstname: "@Model.UserDetailsDisplay.FirstName",
                    lastname : "@Model.UserDetailsDisplay.LastName",
                    email: "@Model.UserDetailsDisplay.EMail",
                    phone: "@Model.UserDetailsDisplay.Phone",
                    bio: "@Model.UserDetailsDisplay.Bio",
                    avatar: "@avtrid",
                    gender: "@Model.UserDetailsDisplay.Gender",
                };
            },
            async mounted() {
             //   document.getElementById("titleBlog").innerHTML = "Our Blogs";
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth', // Use 'smooth' for smooth scrolling effect, 'auto' for instant scrolling
                });
               
            },
        };

        const routes = [
            { path: '/acc', component: HomeComponent },
            { path: '/acc/profile', component: ProfileComponent, props: true }
        ];

        const router = VueRouter.createRouter({
            history: VueRouter.createWebHistory(),
            routes
        });

        const app = Vue.createApp({
            data() {
                return {
                    isLoading: true,
                };
            },
        });
        app.use(router);
        app.mount('#app');
    </script>
    <script>
        function save_prof() {
            //var selectedOption = document.querySelector('input[name="gender"]:checked');
           // var gndrval = selectedOption ? selectedOption.value : "n";

            var saveProfButton = document.getElementById("saveprof");
            saveProfButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Saving';
            saveProfButton.className = "btn btn-primary pe-none";

            var token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            var config = {
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token
                }
            };

            var postData = {
                FirstName: document.getElementById("firstname").value,
                LastName: document.getElementById("lastname").value,
                Phone: document.getElementById("phone").value,
                EMail: document.getElementById("email").value,
               // Gender: gndrval,
                AvatarId: document.getElementById("avatars").value,
                Bio: document.getElementById("bio").value
            };

            alert(FirstName);
            axios.post("/acc?handler=SubmitDeetsNow", postData, config)
                .then(function (response) {
                    var data = response.data;
                    saveProfButton.innerHTML = "Save Profile";
                    saveProfButton.className = "btn btn-primary";


                    var dropdown = document.getElementById("avatars");
                    var selectedOption = dropdown.options[dropdown.selectedIndex];
                    var selectedOptionDataId = selectedOption.getAttribute("image-link");
                    


                    if (data.type == "success") {

                        document.getElementById("profilename").innerHTML = document.getElementById("firstname").value + " " + document.getElementById("lastname").value;
                        document.getElementById("title_master").innerHTML = document.getElementById("firstname").value + " ";
                        document.getElementById("title_master_mobile").innerHTML = document.getElementById("firstname").value;
                        document.getElementById("layout_pfp").setAttribute("src", "/assets/images/avatars/default/" + selectedOptionDataId + ".png");
                        document.getElementById("layout_pfp_mobile").setAttribute("src", "/assets/images/avatars/default/" + selectedOptionDataId + ".png");
                        document.getElementById("avatar_container").src = "/assets/images/avatars/default/" + selectedOptionDataId + ".png";
                        document.getElementById("name_container").innerHTML = document.getElementById("firstname").value + " " + document.getElementById("lastname").value;

                    }

                    toaster(data.type, data.message);
                })
                .catch(function (error) {
                    console.error("Error:", error);
                    saveProfButton.innerHTML = "Save Profile";
                    saveProfButton.className = "btn btn-primary";
                    var profStat = document.getElementById("profstat");
                    toaster("error", "something went wrong");
                });

        }
    </script>
}